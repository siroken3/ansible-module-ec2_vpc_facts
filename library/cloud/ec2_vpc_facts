#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: ec2_vpc_facts
short_description: Gathers facts about vpc in aws
options:
    vpc_id:
        description:
            - Target vpc-id to Gather facts. 
        required: true
description:
     - Gathers facts abour vpc (State,VPC CIDR, Tags.. etc) 
author: "Kenichi Sasaki <siroken3@gmail.com>"
'''

EXAMPLES = '''
- name: Gather vpc facts
  action: ec2_vpc_facts
  vpc_id: {{ vpc_id }}

- name: Print VPC Tag Name
  action: debug msg="{{ansible_ec2_vpc_tag_Name}}"
'''
  
try:
    import boto.ec2
    import boto.vpc
    from boto.exception import EC2ResponseError
except ImportError:
    print "failed=True msg='boto required for this module'"
    sys.exit(1) 

class Ec2Vpc(object):

    def __init__(self, module, vpc_id):
        self.module   = module
	self.vpc_id   = vpc_id
        self._data    = {}
        self._prefix  = 'ansible_ec2_%s'

    def fetch(self):
        url, aws_access_key, aws_secret_key, region = get_ec2_creds(self.module) 
        if region:
            try:
                vpc_conn = boto.vpc.connect_to_region(
	            region,
                    aws_access_key_id=aws_access_key,
                    aws_secret_access_key=aws_secret_key
	        )
            except boto.exception.NoAuthHandlerFound, e:
      		self.module.fail_json(msg = str(e))
	else:
	    self.module.fail_json(msg="region must be specified")
   	vpcs = vpc_conn.get_all_vpcs(None, {'vpc-id': self.vpc_id})
  	if vpcs:
 	    vpc = vpcs[0]
       	    self._data = {
                "ec2_vpc_cidr_block": vpc.cidr_block,
                "ec2_vpc_dhcp_options_id": vpc.dhcp_options_id,
                "ec2_vpc_id": vpc.id,
                "ec2_vpc_is_default": vpc.is_default,
                "ec2_vpc_instance_tenancy": vpc.instance_tenancy,
                "ec2_vpc_state": vpc.state,
                "ec2_vpc_region": vpc.region.name,
    	    }
            if vpc.tags: 
                for k, v in vpc.tags.iteritems():
                    key = self.to_safe('vpc_tag_' + k)
     	            self._data[key] = v
        else:
            self.module.fail_json(msg="no vpc is found (vpc-id = {0})".format(self.vpc_id)) 

    def to_safe(self, word):
        ''' Converts 'bad' characters in a string to underscores so they can be
        used as Ansible groups '''

        return re.sub("[^A-Za-z0-9\-]", "_", word)

    def run(self):
        self.fetch() # populate _data
        return self._data

def main():
    argument_spec = ec2_argument_spec()
    argument_spec.update(dict(
            vpc_id = dict(),
        )
    )

    module = AnsibleModule(
        argument_spec = argument_spec,
        supports_check_mode = True,
    )

    vpc_id = module.params.get('vpc_id')
    ec2_vpc_facts = Ec2Vpc(module, vpc_id).run()
    ec2_vpc_facts_result = dict(changed=False, ansible_facts=ec2_vpc_facts)

    module.exit_json(**ec2_vpc_facts_result)

# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()
